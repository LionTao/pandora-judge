# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'
# strategy:
#   matrix:
#     Python27:
#       python.version: '2.7'
#     Python35:
#       python.version: '3.5'
#     Python36:
#       python.version: '3.6'
#     Python37:
#       python.version: '3.7'

steps:
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '$(python.version)'
  #   displayName: 'Use Python $(python.version)'

  - script: |
      sudo pip3 install --upgrade  pip
      sudo pip3 install --upgrade  setuptools wheel
      sudo pip3 install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      set -e

      root=$(pwd)

      rm -rf "${root}/template"
      rm -rf "${root}/pandora_temp_*"

      echo '' > "${root}/summary.txt"

      git clone -q https://LionTao:$(gitee-pat)@gitee.com/SUMSC/Pandora-2nd-template.git "${root}/template"

      pip3 install -U --user pip
      pip3 install  --user -U -r "${root}/template/requirements.txt"

      cd "${root}"
      python3 "${root}/get_all_user.py"

      sleep 1
      while read id_tag repo
      do
          cd "${root}"
          dir="${id_tag}_pandora"
          echo -e "Now judging $id_tag \n repo : ${repo}"

          if [[ "$repo" == No* ]];then
              echo -e "${id_tag} haven't submitted yet!\n"
              continue

          else
              echo -e  "Cloneing...\c"
              git clone -q "${repo}" "${root}/pandora_temp_${id_tag}"
              echo "ok"
          fi
          scene="/tmp/${id_tag}"
          rm -rf ${scene}
          mkdir -p "${scene}"
          cp -R "${root}/template/tests" "${scene}/tests"
          cp -R "${root}/pandora_temp_${id_tag}/pandora" "${scene}/pandora"
          cd "${scene}/tests"
          python3 grader.py "${id_tag}" "${repo}" 
        #   | grep "id:" >> "${root}/summary.txt"
          cd ${root}
          echo -e "${id_tag} finished!\n"
          rm -rf "${root}/pandora_temp_${id_tag}"
          rm -rf ${scene}


      done < "${root}/id_all.txt"

      cd ${root}
      rm -rf "${root}/template"
      rm -rf "${root}/pandora_temp_*"
      rm "${root}/id_all.txt"

      echo "====== SUMMARY ========"
      cat "${root}/summary.txt"

    displayName: 'Auto Grade'
